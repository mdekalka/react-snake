{"version":3,"sources":["components/common/Spinner.js","components/GameBoard.js","components/GameOver.js","components/common/InformationBoard.js","constants/boardEffectsConstants.js","constants/soundConstants.js","sounds/food.wav","sounds/game-over.mp3","sounds/main-theme.mp3","workflow/audioWorkflow.js","configs/gameConfig.js","utils/common/booleanUtils.js","hooks/useBoardEffects.js","utils/common/arrayUtils.js","components/GameStatistics.js","components/EffectNotification.js","utils/boardUtils.js","constants/directionsConstants.js","utils/coordinateUtils.js","components/SnakeGame.js","hooks/common/useLocalStorage.js","hooks/common/useAudio.js","hooks/common/useInterval.js","App.js","reportWebVitals.js","index.js"],"names":["Spinner","position","className","style","defaultProps","left","top","getCellClassName","cell","foodCells","wallCells","snake","direction","includes","cells","head","GameBoard","board","invisibleWalls","map","row","rowIndex","cellIndex","GameOver","score","speed","onGameStart","useEffect","handleKeyDown","event","code","window","addEventListener","removeEventListener","onClick","InformationBoard","children","InformationSection","typographyMapper","tag","class","InformationTypography","type","sign","highlight","typoghraphy","text","Tag","BOARD_EFFECTS","id","name","description","icon","quality","interactWith","allowedAfter","SOUNDS_HASH","Food","path","repeat","MainTheme","audioWorkflow","sounds","this","DEFAULT_AUDIO_LEVEL","loading","listenCallback","audioContext","audioBuffers","currentPlayingAudio","init","AudioContext","e","console","error","message","loadSounds","Promise","all","Object","values","sound","fetchSound","finally","_","callback","a","fetch","response","ok","Error","status","arrayBuffer","soundBuffer","decodeAudioData","audioSound","audioBuffer","soundOptions","playSound","createBufferSource","gainNode","createGain","gain","value","connect","destination","buffer","loop","stop","start","pause","GAME_CONFIG","getRandomNumberExcluded","min","max","excluded","n","Math","floor","random","getRandomNumbersExcluded","limit","resultNumbers","Array","fill","forEach","count","number","push","effectsHash","array","key","reduce","result","current","arrayToHash","effectIds","keys","getSkipEffectIds","filter","getScoreUntilNextEffect","useBoardEffects","setSnakeSpeed","setFoodCells","setWallCells","setInsivibleWalls","setReverseControl","useState","currentEffect","setCurrentEffect","skipEffectIds","setSkipEffectsIds","effect","effectId","length","getSampleFromArray","toRemoveArray","item","difference","generateNextEffect","newFoodCells","newWallCells","snakeSpeed","applyEffect","GameStatistics","stats","highestScore","highestSpeed","EffectNotification","delay","visible","setVisible","timeoutId","clearInterval","clearTimeout","setTimeout","isBodyCollision","nextCell","getCellPosition","col","createSnake","snakeHeadFactor","snakePosition","factor","rowSize","colSize","round","getFactorCellPosition","tail","DIRECTION","OPPOSITE_DIRECTION","getOppositeDirection","cellId","i","currentRow","j","createBoard","initialSnake","initialFoodCell","SnakeGame","setSnake","setDirection","fututeDirection","useRef","initialValue","localStorage","getItem","JSON","parse","log","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","useLocalStorage","highestStats","saveHighestStats","setScore","isGameOver","setIsGameOver","enabledSound","setEnabledSound","enabled","loadingAudio","setLoadingAudio","enabledAudio","setEnabledAudio","onStateUpdate","play","useCallback","soundType","useAudio","reverseControl","updateHighestState","isNewHighestScore","isNewHighestSpeed","updatedStats","eventCode","getKeyDirection","savedCallback","setInterval","useInterval","newDirection","nextDirection","isOppositeDirection","nextHeadPosition","coordinates","getCoordinatesByDirection","nextPosition","isOutOfBoundaries","getBoundaryCoordinatesByDirection","nextHeadCellPosition","newHead","updatedSnakeCells","snakeCells","foodCell","generateFoodCells","shift","newTail","getCoordinatesByValue","right","title","App","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b01b5b63.chunk.js","sourcesContent":["\r\nimport './Spinner.css';\r\n\r\nexport const Spinner = ({ position }) => {\r\n  return (\r\n    <div className=\"loading-spinner\" style={{ ...position }}></div>\r\n  )\r\n}\r\n\r\nSpinner.defaultProps = {\r\n  position: { left: 25, top: 25 }\r\n}\r\n","import React from 'react';\r\n\r\nimport './GameBoard.css';\r\n\r\n\r\nfunction getCellClassName({ cell, foodCells, wallCells, snake, direction }) {\r\n  let className = 'cell';\r\n\r\n  if (foodCells.includes(cell)) {\r\n    className += ' food-cell';\r\n  }\r\n\r\n  if (snake.cells.includes(cell)) {\r\n    className += ' snake-cell';\r\n  }\r\n\r\n  if (snake.head.cell === cell) {\r\n    className += ` head ${direction}`;\r\n  }\r\n\r\n  if (wallCells.includes(cell)) {\r\n    className += ` wall-cell`;\r\n  }\r\n\r\n  return className;\r\n}\r\n\r\nexport const GameBoard = ({ board, foodCells, snake, direction, wallCells, invisibleWalls }) => {\r\n  return (\r\n    <div className={`board ${invisibleWalls ? 'no-borders': ''}`}>\r\n      {board.map((row, rowIndex) => (\r\n        <div key={rowIndex} className=\"row\">\r\n          {row.map((cell, cellIndex) => (\r\n            <div key={cellIndex} className={getCellClassName({\r\n              cell, foodCells, wallCells, snake, direction })}>\r\n              <div className=\"cell-content\"></div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nGameBoard.defaultProps = {\r\n  board: [],\r\n  foodCells: [],\r\n  snake: {},\r\n  direction: ''\r\n}\r\n","import { useEffect } from 'react';\r\n\r\nimport './GameOver.css';\r\n\r\n\r\nexport const GameOver = ({ score, speed, onGameStart }) => {\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', handleKeyDown);\r\n\r\n    function handleKeyDown(event) {\r\n      const isEnter = event.code === 'Enter';\r\n\r\n      isEnter && onGameStart();\r\n    }\r\n\r\n    return function() {\r\n      window.removeEventListener('keydown', handleKeyDown)\r\n    }\r\n  }, [onGameStart]);\r\n\r\n  return (\r\n    <div className=\"game-over\" onClick={onGameStart}>\r\n      <h4 className=\"header\">You died...</h4>\r\n      <p className=\"text\">Current score: {score}</p>\r\n      <p className=\"text\">Current speed: {speed}</p>\r\n      <p className=\"text\">Press <span className=\"highlight\">Enter</span> or click <span className=\"highlight\">overlay</span> to start new game.</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nGameOver.defaultProps = {\r\n  score: null,\r\n  speed: null,\r\n  onGameStart: () => {}\r\n}\r\n","import { React } from 'react';\r\n\r\nimport './InformationBoard.css';\r\n\r\nexport const InformationBoard = ({ children }) => {\r\n  return (\r\n    <div className=\"information-board\">{children}</div>\r\n  )\r\n}\r\n\r\nInformationBoard.propTypes = {\r\n  children: function (props, propName, componentName) {\r\n    const prop = props[propName];\r\n    let error = null;\r\n\r\n    React.Children.forEach(prop, child => {\r\n      if (child.type !== InformationSection) {\r\n        error = new Error('`' + componentName + '` children should be of type `InformationSectin`.');\r\n      }\r\n    });\r\n\r\n    return error\r\n  }\r\n}\r\n\r\nexport const InformationSection = ({ children }) => {\r\n  return (\r\n    <div className=\"information-section\">{children}</div>\r\n  )\r\n}\r\n\r\nconst typographyMapper = {\r\n  'header': { tag: 'h4', class: 'header' },\r\n  'text': { tag: 'p', class: 'text'},\r\n  'meta': { tag: 'span', class: 'meta' }\r\n}\r\n\r\nexport const InformationTypography = ({ type, sign, highlight, children }) => {\r\n  const typoghraphy = typographyMapper[type] || typographyMapper.text;\r\n  const Tag = typoghraphy.tag;\r\n  const className = typoghraphy.class;\r\n\r\n\r\n  return (\r\n    <Tag className={`information-typography ${className} ${sign} ${highlight ? 'highlight' : ''}`}>{children}</Tag>\r\n  )\r\n}\r\n\r\nInformationTypography.defaultProps = {\r\n  type: 'text',\r\n  sign: '',\r\n  highlight: false,\r\n  children: null\r\n}\r\n","export const GENERATE_EFFECT_SCORE_STEP = 4;\r\n// Numbers of cells that would be generated on board effect\r\nexport const EFFECT_CELLS_COUNT = 5;\r\n// Boost snake speed value\r\nexport const INCREASE_SPEED_VALUE = 20;\r\n\r\n/*\r\n  List of possible generated board effects\r\n  [allowedAfter]: could be generated only after related effect generated first\r\n  [interactWith]: some effects can be dependent by this effect\r\n*/\r\nexport const BOARD_EFFECTS = [\r\n  {\r\n    id: '#1',\r\n    name: 'speedRecovery',\r\n    description: 'Recovers speed to original start value.',\r\n    icon: '✈',\r\n    quality: 'positive'\r\n  },\r\n   {\r\n     id: '#2',\r\n     name: 'foodRain',\r\n     description: 'Generates multiple food cells across the board.',\r\n     icon: '✵',\r\n     quality: 'positive',\r\n   },\r\n   {\r\n     id: '#3',\r\n     name: 'noBorders',\r\n     description: 'Allow snake to go through borders w/o damage.',\r\n     icon: '↹',\r\n     quality: 'positive',\r\n     interactWith: '$8'\r\n   },\r\n   {\r\n    id: '#4',\r\n    name: 'normalControl',\r\n    description: 'Arrow controls become normal.',\r\n    icon: '↔',\r\n    quality: 'positive',\r\n    allowedAfter: '#7'\r\n  },\r\n\r\n   {\r\n    id: '#5',\r\n    name: 'wallRain',\r\n    description: 'Generates multiple walls across the board.',\r\n    icon: '☲',\r\n    quality: 'negative',\r\n  },\r\n  {\r\n    id: '#6',\r\n    name: 'speedBoost',\r\n    description: 'Significantly increase speed.',\r\n    icon: '➢',\r\n    quality: 'negative',\r\n  },\r\n  {\r\n    id: '#7',\r\n    name: 'reverseControl',\r\n    description: 'Arrow controls become reversed.',\r\n    icon: '⤮',\r\n    quality: 'negative',\r\n    interactWith: '#4'\r\n  },\r\n  {\r\n    id: '#8',\r\n    name: 'borders',\r\n    description: 'Moving through borders not allowed.',\r\n    icon: '↛',\r\n    quality: 'negative',\r\n    allowedAfter: '#3'\r\n  },\r\n]\r\n","import foodSound from '../sounds/food.wav';\r\nimport dieSound from '../sounds/game-over.mp3';\r\nimport themeSound from '../sounds/main-theme.mp3';\r\n\r\nexport const SOUNDS_HASH = {\r\n  Food: { name: 'Food', path: foodSound, repeat: false },\r\n  GameOver: { name: 'GameOver', path: dieSound, repeat: false },\r\n  MainTheme: { name: 'MainTheme', path: themeSound, repeat: true }\r\n};\r\n","export default __webpack_public_path__ + \"static/media/food.6b885d08.wav\";","export default __webpack_public_path__ + \"static/media/game-over.9c7e6571.mp3\";","export default __webpack_public_path__ + \"static/media/main-theme.995bbada.mp3\";","import { SOUNDS_HASH } from '../constants/soundConstants'; \r\n\r\n\r\nclass AudioWorkflow {\r\n  constructor(sounds) {\r\n    this.DEFAULT_AUDIO_LEVEL = 0.15;\r\n    this.loading = null;\r\n    this.listenCallback = () => {};\r\n\r\n    this.sounds = sounds;\r\n    this.audioContext = null;\r\n    this.audioBuffers = {};\r\n    this.currentPlayingAudio = null;\r\n\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    try {\r\n      this.audioContext = new AudioContext();\r\n    } catch(e) {\r\n      console.error('Audio context is not suppoorted by browser: ', e.message);\r\n    }\r\n\r\n    if (this.audioContext) {\r\n      this.loadSounds();\r\n    }\r\n  }\r\n\r\n  loadSounds() {\r\n    this.loading = true;\r\n    this.listenCallback(this.loading);\r\n\r\n    Promise.all(Object.values(this.sounds).map(sound => this.fetchSound(sound)))\r\n      .finally(_ => {\r\n        this.loading = false;\r\n        this.listenCallback(this.loading);\r\n      });\r\n  }\r\n\r\n  onStateUpdate(callback) {\r\n    this.listenCallback = callback;\r\n    \r\n    this.listenCallback(this.loading);\r\n  }\r\n\r\n  async fetchSound(sound) {\r\n    try {\r\n      const response = await fetch(sound.path);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Fetch http error: ${response.status}`);\r\n      }\r\n\r\n      const soundBuffer = await response.arrayBuffer();\r\n      const audioSound = await this.audioContext.decodeAudioData(soundBuffer);\r\n\r\n      this.audioBuffers[sound.name] = audioSound;\r\n    } catch(e) {\r\n      console.error('Fetching or decoding audio files failed with: ', e.message);\r\n    }\r\n  }\r\n\r\n  play(sound) {\r\n    if (!sound) return;\r\n\r\n    const { name } = sound; \r\n    const audioBuffer = this.audioBuffers[name];\r\n    const soundOptions = this.sounds[name];\r\n\r\n    if (audioBuffer) {\r\n      const playSound = this.audioContext.createBufferSource();\r\n      const gainNode = this.audioContext.createGain();\r\n\r\n      gainNode.gain.value = this.DEFAULT_AUDIO_LEVEL;\r\n      gainNode.connect(this.audioContext.destination);\r\n\r\n      playSound.buffer = audioBuffer;\r\n      playSound.loop = soundOptions.repeat;\r\n      playSound.connect(gainNode);\r\n\r\n      if (playSound.loop) {\r\n        this.stop();\r\n\r\n        this.currentPlayingAudio = playSound;\r\n      }\r\n\r\n      playSound.start(0);\r\n    }\r\n  }\r\n\r\n  pause() {\r\n    if (this.currentPlayingAudio) {\r\n      this.currentPlayingAudio.pause();\r\n    }\r\n  }\r\n\r\n  stop() {\r\n    if (this.currentPlayingAudio) {\r\n      this.currentPlayingAudio.stop();\r\n    }\r\n  }\r\n}\r\n\r\nexport const audioWorkflow = new AudioWorkflow(SOUNDS_HASH);\r\n","export const GAME_CONFIG = {\r\n  boardRowSize: 14,\r\n  boardColSize: 35,\r\n  boardStartCellId: 1,\r\n  boardEndCellId: 14 * 35,\r\n  snakeSpeed: 150,\r\n  speedGap: 2,\r\n  snakeHeadPositionFactor: 2,\r\n  deathWalls: [],\r\n  invisibleWalls: false,\r\n  reverseControl: false\r\n};\r\n","export function getRandomNumberExcluded(min, max, excluded = []) {\r\n  let n = Math.floor(Math.random() * (max-min) + min);\r\n\r\n  if (excluded.includes(n)) {\r\n    n++;\r\n  }\r\n\r\n  return n;\r\n}\r\n\r\n// TODO: kinda ugly, create a new one w/o looping\r\nexport function getRandomNumbersExcluded(min, max, limit, excluded = []) {\r\n  let resultNumbers = [];\r\n\r\n  new Array(limit).fill(0).forEach(count => {\r\n    const number = getRandomNumberExcluded(min, max, [...excluded, ...resultNumbers]);\r\n\r\n    resultNumbers.push(number);\r\n  });\r\n\r\n  return resultNumbers;\r\n}\r\n\r\nexport function getBoolean(factor = 0.1) { // default ~10% probability of getting true.\r\n  return Math.random() < factor;\r\n}\r\n\r\nexport function getSampleFromArray(array = []) {\r\n  return array[Math.floor(Math.random() * array.length)];\r\n}\r\n","import { useEffect, useState } from 'react';\r\n\r\nimport { GAME_CONFIG } from '../configs';\r\nimport { BOARD_EFFECTS, GENERATE_EFFECT_SCORE_STEP, EFFECT_CELLS_COUNT, INCREASE_SPEED_VALUE } from '../constants/boardEffectsConstants';\r\nimport { getRandomNumbersExcluded, getSampleFromArray } from '../utils/common/booleanUtils';\r\nimport { difference, arrayToHash } from '../utils/common/arrayUtils';\r\n\r\n\r\nconst effectsHash = arrayToHash(BOARD_EFFECTS, 'id');\r\nconst effectIds = Object.keys(effectsHash);\r\n\r\nfunction getSkipEffectIds() {\r\n  return BOARD_EFFECTS.filter(({ allowedAfter }) => allowedAfter).map(({ id }) => id);\r\n}\r\n\r\nexport function getScoreUntilNextEffect(score) {\r\n  const rest = score % GENERATE_EFFECT_SCORE_STEP;\r\n  \r\n  return GENERATE_EFFECT_SCORE_STEP - rest;\r\n}\r\n\r\nexport const useBoardEffects = ({ score, snake, setSnakeSpeed, foodCells, setFoodCells, wallCells, setWallCells, setInsivibleWalls, setReverseControl }) => {\r\n  const [ currentEffect, setCurrentEffect ] = useState(null);\r\n  const [ skipEffectIds, setSkipEffectsIds ] = useState(getSkipEffectIds);\r\n\r\n  useEffect(() => {\r\n    // It's probably new game or restart - just re-init the initial state\r\n    if (score === 0) {\r\n      setCurrentEffect(null);\r\n      setSkipEffectsIds(getSkipEffectIds);\r\n\r\n      return;\r\n    }\r\n\r\n    if (shouldGenerateEffect()) {\r\n      const effect = generateNextEffect();\r\n\r\n      if (effect) {\r\n        setCurrentEffect({ ...effect });\r\n        applyEffect(effect);\r\n      }\r\n    }\r\n  }, [score]);\r\n\r\n  function shouldGenerateEffect() {\r\n    return getScoreUntilNextEffect(score) === GENERATE_EFFECT_SCORE_STEP;\r\n  }\r\n\r\n  function generateNextEffect() {\r\n    const allowedEffectIds = difference(effectIds, skipEffectIds);\r\n    const effectId = getSampleFromArray(allowedEffectIds);\r\n    const effect = effectsHash[effectId];\r\n\r\n    if (effect.interactWith) {\r\n      if (skipEffectIds.includes(effect.interactWith)) {\r\n        setSkipEffectsIds(skipEffectIds.filter(id => id !== effect.interactWith));\r\n      } else {\r\n        setSkipEffectsIds([...skipEffectIds, effect.interactWith])\r\n      }\r\n    }\r\n\r\n    return effect;\r\n  }\r\n\r\n  function applyEffect(effect) {\r\n      switch (effect.name) {\r\n        case 'speedRecovery':\r\n          setSnakeSpeed(GAME_CONFIG.snakeSpeed);\r\n          return;\r\n\r\n        case 'foodRain':\r\n          const newFoodCells = getRandomNumbersExcluded(\r\n            GAME_CONFIG.boardStartCellId,\r\n            GAME_CONFIG.boardEndCellId,\r\n            EFFECT_CELLS_COUNT,\r\n            [...snake.cells, ...foodCells]\r\n          );\r\n\r\n          setFoodCells([...newFoodCells, ...foodCells]);\r\n          return;\r\n\r\n        case 'noBorders':\r\n          setInsivibleWalls(true);\r\n          return;\r\n          \r\n        case 'wallRain':\r\n          const newWallCells = getRandomNumbersExcluded(\r\n            GAME_CONFIG.boardStartCellId,\r\n            GAME_CONFIG.boardEndCellId,\r\n            EFFECT_CELLS_COUNT,\r\n            [...snake.cells, ...foodCells, ...wallCells]\r\n          );\r\n          setWallCells([...wallCells, ...newWallCells]);\r\n          return;\r\n\r\n        case 'speedBoost':\r\n          setSnakeSpeed(snakeSpeed => snakeSpeed - INCREASE_SPEED_VALUE);\r\n          return;\r\n\r\n        case 'normalControl':\r\n          setReverseControl(false);\r\n          return\r\n\r\n        case 'reverseControl':\r\n          setReverseControl(true);\r\n          return;\r\n\r\n        case 'borders':\r\n          setInsivibleWalls(false);\r\n          return;\r\n\r\n        default:\r\n          return;\r\n      }\r\n  }\r\n\r\n  return currentEffect;\r\n}","export function difference(searchArray = [], toRemoveArray = []) {\r\n  return searchArray.filter(item => { return !toRemoveArray.includes(item)});\r\n}\r\n\r\nexport function arrayToHash(array = [], key = 'id') {\r\n  return array.reduce((result, current) => {\r\n    if (!result[key]) {\r\n      result[current[key]] = current;\r\n    }\r\n\r\n    return result;\r\n  }, {});\r\n}\r\n","import { InformationBoard, InformationSection, InformationTypography } from '../components/common/InformationBoard'\r\n\r\nimport { BOARD_EFFECTS } from '../constants/boardEffectsConstants';\r\nimport { getScoreUntilNextEffect } from '../hooks';\r\n\r\nexport const GameStatistics = ({ score, snakeSpeed, stats }) => {\r\n  return (\r\n    <InformationBoard>\r\n      <InformationSection>\r\n        <InformationTypography type=\"header\">Statistics:</InformationTypography>\r\n        \r\n        <InformationTypography type=\"text\">Curent score: {score}</InformationTypography>\r\n        <InformationTypography type=\"text\">Current speed: {snakeSpeed}</InformationTypography>\r\n        <hr/>\r\n        <InformationTypography type=\"text\">Hightest score: {stats.highestScore}</InformationTypography>\r\n        <InformationTypography type=\"text\">Hightest speed: {stats.highestSpeed}</InformationTypography>\r\n        <hr/>\r\n        <InformationTypography>You need to get <InformationTypography type=\"meta\" highlight>{getScoreUntilNextEffect(score)}</InformationTypography> points to generate next effect.</InformationTypography>\r\n      </InformationSection>\r\n      \r\n      <InformationSection>\r\n        <InformationTypography type=\"header\">Controls:</InformationTypography>\r\n\r\n        <InformationTypography type=\"text\"><InformationTypography type=\"meta\" highlight>↑</InformationTypography> - to move up</InformationTypography>\r\n        <InformationTypography type=\"text\"><InformationTypography type=\"meta\" highlight>→</InformationTypography> - to move right</InformationTypography>\r\n        <InformationTypography type=\"text\"><InformationTypography type=\"meta\" highlight>↓</InformationTypography> - to move down</InformationTypography>\r\n        <InformationTypography type=\"text\"><InformationTypography type=\"meta\" highlight>←</InformationTypography> - to move left</InformationTypography>\r\n      </InformationSection>\r\n\r\n      <InformationSection>\r\n        <InformationTypography type=\"header\">Board effects:</InformationTypography>\r\n\r\n        {BOARD_EFFECTS.map(({ id, quality, icon, description}) => (\r\n          <InformationTypography key={id} type=\"text\">\r\n            <InformationTypography sign={quality} type=\"meta\">{icon}</InformationTypography>  - {description}\r\n          </InformationTypography>\r\n        ))}\r\n      </InformationSection>\r\n    </InformationBoard>\r\n  )\r\n}\r\n\r\nGameStatistics.defaultProps = {\r\n  score: 0,\r\n  snakeSpeed: 0,\r\n  stats: {}\r\n}","import { useEffect, useState } from 'react';\r\n\r\nimport { InformationTypography } from './common/InformationBoard';\r\n\r\nimport './EffectNotification.css';\r\n\r\n\r\nexport const EffectNotification = ({ effect, delay }) => {\r\n  const [ visible, setVisible ] = useState(true);\r\n\r\n  useEffect(() => {\r\n    let timeoutId = null;\r\n    setVisible(true)\r\n\r\n    if (effect) {\r\n      timeoutId = setTimeout(() => {\r\n        setVisible(false);\r\n        clearInterval();\r\n      }, delay);\r\n    }\r\n\r\n    function clearInterval() {\r\n      if (timeoutId) {\r\n        clearTimeout(timeoutId);\r\n        timeoutId = null;\r\n      }\r\n    }\r\n\r\n    return function() {\r\n      clearInterval();\r\n    }\r\n  }, [effect, delay]);\r\n\r\n  return (visible && effect) ? (\r\n    <div className=\"notification\">\r\n      <InformationTypography type=\"text\">\r\n        <InformationTypography type=\"meta\" sign={effect.quality}>\r\n          {effect.icon}\r\n        </InformationTypography>  - {effect.description}\r\n      </InformationTypography>\r\n    </div>) : null\r\n}\r\n\r\nEffectNotification.defaultProps = {\r\n  delay: 2000,\r\n  effect: null\r\n}\r\n","export function createBoard(rowSize, colSize) {\r\n  let cellId = 1;\r\n  const board = [];\r\n\r\n  for (let i = 0; i < rowSize; i++) {\r\n    const currentRow = [];\r\n    \r\n    for (let j = 0; j < colSize; j++) {\r\n      currentRow.push(cellId++);\r\n    }\r\n\r\n    board.push(currentRow);\r\n  }\r\n\r\n  return board;\r\n}\r\n\r\nexport function isOutOfBoundaries(nextPosition, board) {\r\n  const { row, col } = nextPosition;\r\n\r\n  if ( row < 0 || col < 0) return true;\r\n  if (row >= board.length || col >= board[0].length) return true;\r\n\r\n  return false;\r\n}\r\n\r\nexport function isBodyCollision(cells, nextCell) {\r\n  return cells.includes(nextCell);\r\n}\r\n\r\nexport function getCellPosition(board, row, col) {\r\n  return board[row][col];\r\n}\r\n\r\nfunction getFactorCellPosition(board, factor) {\r\n  const rowSize = board.length;\r\n  const colSize = board[0].length;\r\n\r\n  const row = Math.round(rowSize / (board.length / factor));\r\n  const col = Math.round(colSize / (board.length / factor));\r\n  const cell = getCellPosition(board, row, col);\r\n\r\n  return { row, col, cell };\r\n}\r\n\r\nexport function createSnake(board, snakeHeadFactor) {\r\n  const snakePosition = getFactorCellPosition(board, snakeHeadFactor);\r\n\r\n  return { head: snakePosition, tail: snakePosition, cells: [snakePosition.cell] }\r\n}\r\n","export const DIRECTION = {\r\n  UP: 'up',\r\n  RIGHT: 'right',\r\n  DOWN: 'down',\r\n  LEFT: 'left'\r\n};\r\n\r\nexport const OPPOSITE_DIRECTION = {\r\n  [DIRECTION.UP]: DIRECTION.DOWN,\r\n  [DIRECTION.RIGHT]: DIRECTION.LEFT,\r\n  [DIRECTION.DOWN]: DIRECTION.UP,\r\n  [DIRECTION.LEFT]: DIRECTION.RIGHT\r\n}\r\n","import { DIRECTION, OPPOSITE_DIRECTION } from '../constants/directionsConstants';\r\n\r\nexport function getKeyDirection(eventCode) {\r\n  switch (eventCode) {\r\n    case 'ArrowLeft':\r\n      return DIRECTION.LEFT;\r\n    case 'ArrowUp':\r\n      return DIRECTION.UP;\r\n    case 'ArrowRight':\r\n      return DIRECTION.RIGHT;\r\n    case 'ArrowDown':\r\n      return DIRECTION.DOWN;\r\n\r\n    default:\r\n      return '';\r\n  }\r\n}\r\n\r\nexport function getOppositeDirection(direction) {\r\n  return OPPOSITE_DIRECTION[direction];\r\n}\r\n\r\nexport function isOppositeDirection(direction, nextDirection) {\r\n  return getOppositeDirection(direction) === nextDirection;\r\n}\r\n\r\nexport function getCoordinatesByDirection(coordinates, direction) {\r\n  const { row, col } = coordinates;\r\n\r\n  switch (direction) {\r\n    case DIRECTION.UP:\r\n      return { row: row - 1, col };\r\n\r\n    case DIRECTION.RIGHT:\r\n        return { row, col: col + 1 };\r\n    \r\n    case DIRECTION.DOWN:\r\n      return { row: row + 1, col };\r\n\r\n    case DIRECTION.LEFT:\r\n      return { row, col: col - 1 };\r\n\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\nexport function getBoundaryCoordinatesByDirection(coordinates, board, direction) {\r\n  const { row, col } = coordinates;\r\n\r\n  switch (direction) {\r\n    case DIRECTION.UP:\r\n      return { row: board.length - 1, col };\r\n\r\n    case DIRECTION.RIGHT:\r\n        return { row, col: 0 };\r\n    \r\n    case DIRECTION.DOWN:\r\n      return { row: 0, col };\r\n\r\n    case DIRECTION.LEFT:\r\n      return { row, col: board[0].length - 1 };\r\n\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\nexport function getCoordinatesByValue(board, value) {\r\n  for (let i = 0; i < board.length; i++) {\r\n    for (let j = 0; j < board.length; j++) {\r\n      if (board[i][j] === value) {\r\n        return { row: i, col: j, cell: value };\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { useState, useEffect, useCallback, useRef } from 'react';\r\n\r\nimport { Spinner } from '../components/common/Spinner'; \r\nimport { GameBoard } from '../components/GameBoard';\r\nimport { GameOver } from '../components/GameOver';\r\nimport { GameStatistics } from '../components/GameStatistics'; \r\nimport { EffectNotification } from '../components/EffectNotification'\r\n \r\nimport { GAME_CONFIG } from '../configs'\r\n\r\nimport { useInterval, useAudio, useBoardEffects, useLocalStorage } from '../hooks';\r\nimport { createBoard, createSnake, isOutOfBoundaries, getCellPosition, isBodyCollision } from '../utils/boardUtils';\r\nimport { getKeyDirection, isOppositeDirection, getCoordinatesByDirection, getCoordinatesByValue, getBoundaryCoordinatesByDirection, getOppositeDirection } from '../utils/coordinateUtils';\r\nimport { getRandomNumberExcluded } from '../utils/common/booleanUtils'\r\n\r\nimport './SnakeGame.css';\r\n\r\n\r\nconst board = createBoard(GAME_CONFIG.boardRowSize, GAME_CONFIG.boardColSize);\r\nconst initialSnake = createSnake(board, GAME_CONFIG.snakeHeadPositionFactor);\r\nconst initialFoodCell = getRandomNumberExcluded(initialSnake.head.cell, GAME_CONFIG.boardEndCellId, [initialSnake.head.cell]);\r\nconst STORAGE_STATS_KEY = 'highest-stats';\r\n\r\n\r\nexport const SnakeGame = () => {\r\n  const [ snake, setSnake ] = useState(initialSnake);\r\n  const [ snakeSpeed, setSnakeSpeed ] = useState(GAME_CONFIG.snakeSpeed);\r\n  const [ foodCells, setFoodCells ] = useState([initialFoodCell]);\r\n  const [ direction, setDirection ] = useState(null);\r\n  const fututeDirection = useRef(direction);\r\n\r\n  const [ highestStats, saveHighestStats ] = useLocalStorage(STORAGE_STATS_KEY, { highestScore: 0, highestSpeed: GAME_CONFIG.snakeSpeed });\r\n  const [ score, setScore ] = useState(0);\r\n  const [ isGameOver, setIsGameOver ] = useState(false);\r\n\r\n  const [ enabledSound, setEnabledSound ] = useState(false);\r\n  const { loading, play, sounds } = useAudio(enabledSound);\r\n\r\n  const [ wallCells, setWallCells ] = useState(GAME_CONFIG.deathWalls);\r\n  const [ invisibleWalls, setInsivibleWalls ] = useState(GAME_CONFIG.invisibleWalls);\r\n  const [ reverseControl, setReverseControl ] = useState(GAME_CONFIG.reverseControl);\r\n  const effect = useBoardEffects({\r\n    score,\r\n    snake,\r\n    snakeSpeed,\r\n    setSnakeSpeed,\r\n    foodCells,\r\n    setFoodCells,\r\n    wallCells,\r\n    setWallCells,\r\n    setInsivibleWalls,\r\n    setReverseControl\r\n  });\r\n\r\n  const updateHighestState = useCallback(() => {\r\n    const isNewHighestScore = score > highestStats.highestScore;\r\n    const isNewHighestSpeed = snakeSpeed < highestStats.highestSpeed;\r\n    let updatedStats = {\r\n      ...(isNewHighestScore && { highestScore: score }),\r\n      ...(isNewHighestSpeed && { highestSpeed: snakeSpeed }),\r\n    };\r\n\r\n    saveHighestStats(stats => ({ ...stats, ...updatedStats }));\r\n  }, [score, snakeSpeed, highestStats, saveHighestStats]);\r\n\r\n  const onGameStart = useCallback(() => {\r\n    const initialSnake = createSnake(board, GAME_CONFIG.snakeHeadPositionFactor);;\r\n    const initialFoodCell = getRandomNumberExcluded(initialSnake.head.cell, GAME_CONFIG.boardEndCellId, [initialSnake.head.cell]);\r\n\r\n    updateHighestState();\r\n    fututeDirection.current = null;\r\n\r\n    setInsivibleWalls(GAME_CONFIG.invisibleWalls);\r\n    setReverseControl(GAME_CONFIG.reverseControl);\r\n    setIsGameOver(false);\r\n    setSnake(initialSnake);\r\n    setFoodCells([initialFoodCell]);\r\n    setWallCells(GAME_CONFIG.deathWalls);\r\n    setDirection(null);\r\n    setScore(0);\r\n    setSnakeSpeed(GAME_CONFIG.snakeSpeed);\r\n  }, [updateHighestState]);\r\n\r\n  useEffect(() => {\r\n    play(sounds.MainTheme);\r\n  }, [play, sounds]);\r\n\r\n  useEffect(() => {\r\n    isGameOver && play(sounds.GameOver);\r\n  }, [isGameOver, play, sounds]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', handleKeyDown);\r\n\r\n    function handleKeyDown(event) {\r\n      if (isGameOver) return;\r\n\r\n      let direction = getKeyDirection(event.code);\r\n      const isValidDirection = direction !== '';\r\n\r\n      if (isValidDirection) {\r\n        if (reverseControl) {\r\n          direction = getOppositeDirection(direction);\r\n        }\r\n\r\n        // Since keydown logic happens outside on tick interval, we can't update direction state here.\r\n        // Instead we're saving only ref with future direction and save it inside interval tick update\r\n        fututeDirection.current = direction;\r\n      }\r\n    }\r\n\r\n    return function() {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n    }\r\n  }, [isGameOver, reverseControl])\r\n\r\n  useInterval(() => {\r\n    if (!fututeDirection.current) return;\r\n\r\n    const newDirection = isOppositeDirection(direction, fututeDirection.current) ? direction : fututeDirection.current;\r\n    let nextHeadPosition = getCoordinatesByDirection(snake.head, newDirection); \r\n\r\n    // Out of board size - end the game\r\n    if (isOutOfBoundaries(nextHeadPosition, board)) {\r\n      if (invisibleWalls) {\r\n        nextHeadPosition = getBoundaryCoordinatesByDirection(nextHeadPosition, board, newDirection);\r\n      } else {\r\n        return setIsGameOver(true);\r\n      }\r\n    }\r\n\r\n    const nextHeadCellPosition = getCellPosition(board, nextHeadPosition.row, nextHeadPosition.col);\r\n    const newHead = {...nextHeadPosition, cell: nextHeadCellPosition};\r\n    let updatedSnakeCells = [];\r\n\r\n    // Checking snake body collision with new snake head \r\n    if (isBodyCollision(snake.cells, newHead.cell)) {\r\n      return setIsGameOver(true);\r\n    }\r\n\r\n    // Checking wall cells collision with new snake head\r\n    if (isBodyCollision(wallCells, newHead.cell)) {\r\n      return setIsGameOver(true);\r\n    }\r\n\r\n    if (foodCells.includes(nextHeadCellPosition)) {\r\n      updatedSnakeCells = [...snake.cells, nextHeadCellPosition];\r\n\r\n      generateFoodCells(updatedSnakeCells);\r\n      setSnakeSpeed(speed => speed - GAME_CONFIG.speedGap);\r\n      setScore(score => score + 1);\r\n\r\n      play(sounds.Food);\r\n    } else {  // no food consumption, just regular moving\r\n      updatedSnakeCells = [...snake.cells];\r\n\r\n      updatedSnakeCells.shift();\r\n      updatedSnakeCells.push(newHead.cell);\r\n    }\r\n\r\n    const newTail = getCoordinatesByValue(board, updatedSnakeCells[0]);\r\n\r\n    setDirection(newDirection);\r\n    setSnake({ head: newHead, tail: newTail, cells: updatedSnakeCells });\r\n  }, !isGameOver ? snakeSpeed : null); // stop interval on game over\r\n\r\n  function generateFoodCells(snakeCells) {\r\n    const foodCell = getRandomNumberExcluded(GAME_CONFIG.boardStartCellId, GAME_CONFIG.boardEndCellId, snakeCells);\r\n    const newFoodCells = foodCells.filter(cell => !snakeCells.includes(cell));\r\n\r\n    setFoodCells([...newFoodCells, foodCell]);\r\n  }\r\n\r\n  function onToggleAudio() {\r\n    setEnabledSound(sound => !sound);\r\n  }\r\n\r\n  return (\r\n    <div className=\"game-wrapper\">\r\n      {loading\r\n        ? <Spinner position={{ top: 25, right: 25 }} />\r\n        : <div className={`sound-control ${enabledSound ? 'on' : ''}`} title=\"audio toggle\" onClick={onToggleAudio}>♬</div>\r\n      }\r\n      <EffectNotification effect={effect} delay={5000} />\r\n      <div className=\"board-wrapper\">\r\n        <GameBoard\r\n          board={board}\r\n          foodCells={foodCells}\r\n          wallCells={wallCells}\r\n          snake={snake}\r\n          direction={direction}\r\n          invisibleWalls={invisibleWalls}\r\n        />\r\n        {isGameOver && <GameOver score={score} speed={snakeSpeed} onGameStart={onGameStart} />}\r\n      </div>\r\n      <GameStatistics score={score} snakeSpeed={snakeSpeed} stats={highestStats} />\r\n    </div>\r\n  )\r\n}\r\n","import { useState } from 'react';\r\n\r\nexport function useLocalStorage(key, initialValue) {\r\n  // State to store our value\r\n  // Pass initial state function to useState so logic is only executed once\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      // Get from local storage by key\r\n      const item = window.localStorage.getItem(key);\r\n      // Parse stored json or if none return initialValue\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      // If error also return initialValue\r\n      console.log(error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  // Return a wrapped version of useState's setter function that ...\r\n  // ... persists the new value to localStorage.\r\n  const setValue = value => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useState\r\n      const valueToStore =\r\n        value instanceof Function ? value(storedValue) : value;\r\n      // Save state\r\n      setStoredValue(valueToStore);\r\n      // Save to local storage\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      // A more advanced implementation would handle the error case\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n}","import { useState, useEffect, useCallback } from 'react';\r\n\r\nimport { audioWorkflow } from '../../workflow/audioWorkflow';\r\n\r\n\r\nexport const useAudio = (enabled) => {\r\n  const [ loadingAudio, setLoadingAudio ] = useState(null);\r\n  const [ enabledAudio, setEnabledAudio ] = useState(false);\r\n\r\n  useEffect(() => {\r\n    audioWorkflow.onStateUpdate(loading => {\r\n      setLoadingAudio(loading);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setEnabledAudio(enabled);\r\n\r\n    if (!enabled) {\r\n      audioWorkflow.stop();\r\n    }\r\n  }, [enabled]);\r\n\r\n  const play = useCallback((soundType) => {\r\n    if (enabledAudio) {\r\n      audioWorkflow.play(soundType);\r\n    }\r\n  }, [enabledAudio]);\r\n\r\n  return {\r\n    loading: loadingAudio,\r\n    sounds: audioWorkflow.sounds,\r\n    play\r\n  }\r\n}\r\n","import { useRef, useEffect } from 'react';\r\n\r\nexport const useInterval = (callback, delay) => {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest function.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n","import { SnakeGame } from './components/SnakeGame';\r\n\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <SnakeGame />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\n\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />,\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}